resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return tibble(status = status_cd)
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
tibble(
status = status_cd,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
}
weather.meta(28.0, -82.0)
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
#returns tibble with
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
points.url
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return tibble(status = status_cd)
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
tibble(
status = status_cd,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
}
meta.info <- weather.meta(28.0, -82.0)
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
#returns tibble with
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
points.url
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return tibble(status = status_cd)
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
tibble(
status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
}
meta.info <- weather.meta(28.0, -82.0)
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
#returns tibble with
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
points.url
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return tibble(http_status = status_cd)
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
}
meta.info <- weather.meta(28.0, -82.0)
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
#returns tibble with
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
points.url
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return data_frame(http_status = status_cd)
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
}
meta.info <- weather.meta(28.0, -82.0)
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
#returns tibble with
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
points.url
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return data_frame(http_status = status_cd)
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
}
meta.info <- weather.meta(28.0, -82.0)
meta.info$gridX
meta.info$gridY
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
#returns tibble with
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
df <- data.frame(http_status = status_cd)
return df
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
}
meta.info <- weather.meta(28.0, -82.0)
meta.info$gridX
meta.info$gridY
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
##########################################################################################
##
##########################################################################################
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
}
meta.info <- weather.meta(28.0, -82.0)
meta.info$gridX
meta.info$gridY
meta.info$forecast.url
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
##########################################################################################
##
##########################################################################################
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
meta.tbl <- tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
meta.tbl
}
forecast.periodic <- function(meta) {
}
forecast.hourly <- function(meta) {
}
forecast.gridpoints <- function(meta) {
}
meta.info <- weather.meta(28.0, -82.0)
meta.info$gridX
meta.info$gridY
meta.info$forecast.url
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
##########################################################################################
##
##########################################################################################
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
meta.tbl <- tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
attr(meta.tbl, 'info.type') <- 'nws.meta'
meta.tbl
}
forecast.periodic <- function(meta) {
}
forecast.hourly <- function(meta) {
}
forecast.gridpoints <- function(meta) {
}
meta.info <- weather.meta(28.0, -82.0)
meta.info$gridX
meta.info$gridY
meta.info$forecast.url
meta.info
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
##########################################################################################
##
##########################################################################################
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
meta.tbl <- tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
attr(meta.tbl, 'info.type') <- 'nws.meta'
meta.tbl
}
forecast.periodic <- function(meta) {
}
forecast.hourly <- function(meta) {
}
forecast.gridpoints <- function(meta) {
}
meta.info <- weather.meta(28.0, -82.0)
meta.info$gridX
meta.info$gridY
meta.info$forecast.url
attributes(meta.info)
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
##########################################################################################
##
##########################################################################################
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
meta.tbl <- tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
attr(meta.tbl, 'info.type') <- 'nws.meta'
meta.tbl
}
forecast.periodic <- function(meta) {
if("nws.meta" != attr(meta, "info.type")) {
print("BLEAH")
}
}
forecast.hourly <- function(meta) {
if("nws.meta" != attr(meta, "info.type")) {
print("BLEAH")
}
}
forecast.gridpoints <- function(meta) {
if("nws.meta" != attr(meta, "info.type")) {
print("BLEAH")
}
}
tb.meta.info <- weather.meta(28.0, -82.0)
tb.forecast <- forecast.periodic(tb.meta.info)
library(tidyverse)
library(tibble)
library(httr)
library(geojson)
library(rjson)
##########################################################################################
##
##########################################################################################
weather.meta <- function(lat, lon) {
points.url <- paste("https://api.weather.gov/points/", lat, ",", lon, sep = "")
resp <- httr::GET(points.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
meta.tbl <- tibble(
http_status = 200,
cwa = body$properties$cwa,
gridX = body$properties$gridX,
gridY = body$properties$gridY,
forecast.office.url = body$properties$forecastOffice,
forecast.url = body$properties$forecast,
forecast.hourly.url = body$properties$forecastHourly,
forecast.grid.data.url = body$properties$forecastGridData,
forecast.grid.stations.url = body$properties$observationStations,
forecast.zone.url = body$properties$forecastZone,
county = body$properties$county,
fire.zone = body$properties$fireWeatherZone,
time.zone = body$properties$timeZone,
radar.station = body$properties$radarStation
)
attr(meta.tbl, 'info.type') <- 'nws.meta'
meta.tbl
}
forecast.periodic <- function(meta) {
if("nws.meta" != attr(meta, "info.type")) {
print("BLEAH")
}
resp <- httr::GET(meta$forecast.url)
status_cd <- status_code((resp))
if(200 != status_cd) {
return
}
body <- content(resp, "parsed", encoding = "UTF-8", type = "application/json")
body
}
forecast.hourly <- function(meta) {
if("nws.meta" != attr(meta, "info.type")) {
print("BLEAH")
}
}
forecast.gridpoints <- function(meta) {
if("nws.meta" != attr(meta, "info.type")) {
print("BLEAH")
}
}
tb.meta.info <- weather.meta(28.0, -82.0)
tb.forecast <- forecast.periodic(tb.meta.info)
tb.forecast <- forecast.periodic(tb.meta.info)
tb.forecast
